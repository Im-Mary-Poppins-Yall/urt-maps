{"version":3,"sources":["MapCard.js","TagsList.js","MainPage.js","MapDetailPage.js","App.js","serviceWorker.js","index.js"],"names":["MapCard","map","cb","ss","screenShots","prefix","_id","className","onClick","src","alt","Grid","container","direction","justify","alignItems","item","xs","id","length","title","TagsList","tagsList","visibleTagsList","clickedTagsList","callBackFunc","style","paddingLeft","tagName","count","isUnClicked","has","Button","variant","color","size","key","marginRight","marginBottom","paddingBottom","Badge","badgeContent","MainPage","updateViewCB","useState","isConnected","setIsConnected","mongoClient","useRef","maps","visibleMaps","setVisibleMaps","visibleTags","setVisibleTags","Set","clickedTags_Set","setClickedTags_Set","searchInput","setSearchInput","handleCardClick","aMap","ssFileName","useEffect","current","Stitch","initializeDefaultAppClient","creds","AnonymousCredential","auth","loginWithCredential","then","user","callFunction","response","result","newVisibleMaps","filter","singleMap","include","forEach","tag","featureTags","includes","sort","a","b","newVisibleTags","Map","get","set","InputBase","placeholder","inputProps","startAdornment","InputAdornment","position","Search","value","onChange","event","target","fullWidth","toString","newTagsList","delete","add","MapDetailPage","ssClicked","height","minWidth","maxHeight","App","viewState","setViewState","detailMap","setDetailMap","ssFileName2","setssFileName2","CssBaseline","aMapObj","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.70bd3ab4.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './MapCard.css';\r\nimport { Grid } from '@material-ui/core';\r\n\r\nexport default function MapCard({ map, cb }) {\r\n    const ss = map.screenShots;\r\n    const prefix = `ss/${map._id}/`;\r\n\r\n    return (\r\n        <>\r\n            <div className='card'>\r\n                <button className='bare-button-main' onClick={() => cb(map, ss[0])}>\r\n                    <img className='main-ss' src={prefix + ss[0]} alt='main screenshot' />\r\n                </button>\r\n                <span>\r\n                    <button className='bare-button-sub bare-button-sub-left' onClick={() => cb(map, ss[1])}>\r\n                        <img className='sub-ss' src={prefix + ss[1]} alt='screenshot 2' />\r\n                    </button>\r\n                    <button className='bare-button-sub bare-button-sub-right' onClick={() => cb(map, ss[2])}>\r\n                        <img className='sub-ss' src={prefix + ss[2]} alt='screenshot 3' />\r\n                    </button>\r\n                </span>\r\n                <Grid container direction='row' justify='center' alignItems='center'>\r\n                    <Grid item xs={2}>\r\n                        &nbsp;\r\n                    </Grid>\r\n                    <Grid item xs={8}>\r\n                        <h2 id='title'>{map._id}</h2>\r\n                    </Grid>\r\n                    <Grid item xs={2}>\r\n                        {ss.length > 3 ? (\r\n                            <button className='more-button' onClick={() => cb(map, ss[3])} title='more screenshots'>\r\n                                {/* ^ *** link to carousel later */}\r\n                                +more screenshots\r\n                            </button>\r\n                        ) : null}\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nMapCard.propTypes = {\r\n    map: PropTypes.object,\r\n    cb: PropTypes.func,\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Badge, Button } from '@material-ui/core';\r\n\r\nTagsList.propTypes = {\r\n    tagsArray: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.string, PropTypes.number)),\r\n    clickedTagsList: PropTypes.instanceOf(Set),\r\n    callBackFunc: PropTypes.func,\r\n};\r\n\r\n// this function takes an Array of strings+counts, a Set of clicked tags, and a callback Function, and returns a collection of Buttons\r\nexport default function TagsList({ visibleTagsList: tagsList, clickedTagsList, callBackFunc }) {\r\n    if (!tagsList || tagsList.length < 0 || !callBackFunc) return <div>Making tags...</div>;\r\n    return (\r\n        <div style={{ paddingLeft: '.2rem' }}>\r\n            {tagsList.map(([tagName, count]) => {\r\n                const isUnClicked = clickedTagsList && !clickedTagsList.has(tagName);\r\n                return (\r\n                    <Button\r\n                        variant={isUnClicked && count > 1 ? 'outlined' : 'contained'}\r\n                        color={isUnClicked ? 'default' : 'primary'}\r\n                        size='small'\r\n                        key={tagName + '_button'}\r\n                        onClick={() => callBackFunc(tagName)}\r\n                        style={{ marginRight: '5px', marginBottom: '5px', paddingBottom: '1px' }}\r\n                    >\r\n                        <Badge badgeContent={count} color='primary'>\r\n                            {tagName} &nbsp;\r\n                        </Badge>\r\n                    </Button>\r\n                );\r\n            })}\r\n        </div>\r\n    );\r\n}\r\n","import React, { useEffect, useState, useRef } from 'react';\r\nimport { Stitch, AnonymousCredential } from 'mongodb-stitch-browser-sdk'; // package for connecting to our MongoDB-Realm app; Realm is the new name for Stitch but this package still works\r\nimport MapCard from './MapCard';\r\nimport TagsList from './TagsList';\r\nimport './MainPage.css'; // style sheet for just this app component\r\nimport { Badge, InputAdornment, InputBase } from '@material-ui/core'; // reset CSS properties across browsers to a baseline, and controls\r\nimport { Search } from '@material-ui/icons';\r\n\r\nexport default function MainPage({ updateViewCB }) {\r\n    const CONNECTED = 'IS connected';\r\n    const NOTCONNECTED = 'is NOT connected';\r\n    const [isConnected, setIsConnected] = useState(NOTCONNECTED);\r\n    const mongoClient = useRef([]); // for saving the mongoClient object across renders of this component;  *** may not need to save this if only used in one function\r\n    // const mongoUser = useRef();  // *** not sure we need to save this\r\n\r\n    const maps = useRef([]); // all the maps from the database, full object details per map\r\n    const [visibleMaps, setVisibleMaps] = useState([]); // array of map objects\r\n    const [visibleTags, setVisibleTags] = useState([]);\r\n    const [clickedTags_Set, setClickedTags_Set] = useState(new Set());\r\n    const [searchInput, setSearchInput] = useState(''); // complains about switching from uncontrolled to controlled input without an empty string to start\r\n\r\n    // this is where we connect to the database, and save it all into \"maps\"\r\n    useEffect(() => {\r\n        if (maps.current.length < 1) {\r\n            setIsConnected('is connecting...');\r\n            // initializeDefaultAppClient is really picky, only wants to be run once.  And saving the referenece to it is also picky\r\n            mongoClient.current = Stitch.initializeDefaultAppClient('fsk-realmapp-slofx'); // string is app ID (realmApp, not realMapp)\r\n\r\n            const creds = new AnonymousCredential();\r\n            mongoClient.current.auth.loginWithCredential(creds).then((user) => {\r\n                // *** user unneeded? ^\r\n                setIsConnected(CONNECTED);\r\n                // mongoUser.current = user;\r\n                mongoClient.current.callFunction('getAllMapData').then((response) => {\r\n                    maps.current = response.result;\r\n                    setClickedTags_Set(new Set()); // initialize this Set and trigger Visibles updates\r\n                });\r\n            });\r\n        }\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, []); // the empty array at the end means this hook only runs once, after the web page is done with the initial render\r\n\r\n    // this hook updates visibleMaps & visibleTags when clickedTags_Set changes\r\n    useEffect(() => {\r\n        let newVisibleMaps = [];\r\n\r\n        // update visibleMaps based on what tags are clicked\r\n        if (!clickedTags_Set || clickedTags_Set.size < 1) {\r\n            if (maps && maps.current) newVisibleMaps = maps.current; // all maps visible, if maps have loaded\r\n        } else {\r\n            newVisibleMaps = maps.current.filter((singleMap) => {\r\n                let include = true;\r\n                clickedTags_Set.forEach((tag) => {\r\n                    include &= singleMap.featureTags.includes(tag); // a map must have every clicked tag to be included\r\n                });\r\n                return include ? singleMap : null;\r\n            });\r\n        }\r\n        newVisibleMaps.sort((a, b) => {\r\n            if (a._id < b._id) return -1;\r\n            if (a._id > b._id) return 1;\r\n            return 0;\r\n        });\r\n        setVisibleMaps(newVisibleMaps);\r\n\r\n        // update visibleTags based on visibleMaps (reusing newVisibleMaps above, not waiting for async set)\r\n        let newVisibleTags = new Map();\r\n        newVisibleMaps.forEach((singleMap) => {\r\n            singleMap.featureTags.forEach((tag) => {\r\n                // for each tag in each map\r\n                let count = newVisibleTags.get(tag); // if a tag exists, get its count\r\n                if (!count) count = 1;\r\n                else count += 1;\r\n                newVisibleTags.set(tag, count); // add pair to Map... tag: count\r\n            });\r\n        });\r\n        setVisibleTags(\r\n            [...newVisibleTags].sort((a, b) => {\r\n                // if (a[1] > b[1]) return -1; // descending by count ([1])\r\n                // if (a[1] < b[1]) return 1;\r\n                if (a[0] > b[0]) return 1; // when tied, ascending by tag name ([0])\r\n                if (a[0] < b[0]) return -1;\r\n                return 0; // this should never be reached due to unique tag names, but just in case\r\n            })\r\n        );\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [clickedTags_Set]);\r\n\r\n    function handleMapFilterClick(tag) {\r\n        let newTagsList = new Set(clickedTags_Set); // shallow copy\r\n        if (newTagsList.has(tag)) {\r\n            newTagsList.delete(tag);\r\n        } else {\r\n            newTagsList.add(tag);\r\n        }\r\n\r\n        setClickedTags_Set(newTagsList);\r\n        setSearchInput([...newTagsList].toString()); // *** just for real-time testing\r\n    }\r\n\r\n    function handleSearchChange(event) {\r\n        setSearchInput(event.target.value);\r\n\r\n        // todo:  parse input in real-time and update clicked tags, visibles\r\n    }\r\n\r\n    function handleCardClick(aMap, ssFileName) {\r\n        // window.location.assign('ss/' + mapName + '/' + ssFileName);\r\n        updateViewCB(aMap, ssFileName);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <header className='App-header'>\r\n                <h1>\r\n                    <Badge\r\n                        badgeContent={\r\n                            'db ' +\r\n                            isConnected +\r\n                            ' | ' +\r\n                            (visibleMaps ? visibleMaps.length : '0') +\r\n                            (visibleMaps && visibleMaps.length === 1 ? ' map visible' : ' maps visible')\r\n                        }\r\n                        color={isConnected === CONNECTED ? 'secondary' : 'error'}\r\n                    >\r\n                        URT MAP FINDER\r\n                    </Badge>\r\n                </h1>\r\n            </header>\r\n            <div id='search-bar'>\r\n                <InputBase\r\n                    placeholder='start typing map keywords here, separated by commas'\r\n                    id='search-box'\r\n                    inputProps={{ 'aria-label': 'naked' }}\r\n                    startAdornment={\r\n                        <InputAdornment position='start'>\r\n                            <Search />\r\n                        </InputAdornment>\r\n                    }\r\n                    value={searchInput}\r\n                    onChange={handleSearchChange}\r\n                    fullWidth\r\n                />\r\n            </div>\r\n            <div style={{ paddingLeft: '.5em' }}>\r\n                Realtime test, showing your <em>typed text or clicked tag:</em>\r\n                &nbsp; {searchInput.toString()}\r\n            </div>\r\n            <h2 style={{ paddingLeft: '1rem' }}>\r\n                <Badge badgeContent={visibleTags.length + ' visible'} color='secondary'>\r\n                    Map feature tags\r\n                </Badge>\r\n            </h2>\r\n            <TagsList\r\n                visibleTagsList={visibleTags}\r\n                clickedTagsList={clickedTags_Set}\r\n                callBackFunc={handleMapFilterClick}\r\n            />\r\n            <br />\r\n            <div id='card-list'>\r\n                {visibleMaps.length > 0\r\n                    ? visibleMaps.map((aMap) => <MapCard map={aMap} cb={handleCardClick} key={aMap._id} />)\r\n                    : 'loading maps...'}\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction MapDetailPage({ map, ssClicked }) {\r\n    if (!map || !ssClicked) return <p>EMPTY PARAMETERS PASSED</p>;\r\n\r\n    const prefix = `ss/${map._id}/`;\r\n\r\n    return (\r\n        <div style={{ height: 'fitContent(100)' }}>\r\n            <div style={{ minWidth: '100%', maxHeight: '80%' }}>\r\n                <img src={prefix + ssClicked} alt={'screenshot ' + ssClicked} />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nMapDetailPage.propTypes = {\r\n    map: PropTypes.object,\r\n    ssClicked: PropTypes.string,\r\n};\r\n\r\nexport default MapDetailPage;\r\n","import React, { useState } from 'react';\r\nimport MainPage from './MainPage';\r\nimport MapDetailPage from './MapDetailPage';\r\nimport { CssBaseline } from '@material-ui/core';\r\n\r\nexport default function App() {\r\n    const MAINVIEW = 1;\r\n\r\n    const [viewState, setViewState] = useState(MAINVIEW);\r\n    const [detailMap, setDetailMap] = useState();\r\n    const [ssFileName2, setssFileName2] = useState();\r\n\r\n    function updateView(aMapObj, ssFileName) {\r\n        setDetailMap(aMapObj);\r\n        setssFileName2(ssFileName);\r\n        setViewState(2);\r\n    }\r\n\r\n    // return is what renders the html (and jsx) of our component:\r\n    return (\r\n        <>\r\n            <CssBaseline />\r\n            {viewState === MAINVIEW ? (\r\n                <MainPage updateViewCB={updateView} />\r\n            ) : (\r\n                <MapDetailPage map={detailMap} ssClicked={ssFileName2} />\r\n            )}\r\n        </>\r\n    );\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}